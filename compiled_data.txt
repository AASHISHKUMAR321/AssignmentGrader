File: .gitignore
.node_modules
.package-lock.json

Folder: Crashed
  File: e3652f97aad571b5.txt
Sample file content

Folder: In-progress
  File: 0fd15b0d908d36b5.txt
Sample file content

  File: 1332dc8c23cfc3f6.txt
Sample file content

  File: 52a1588a070112d6.txt
Sample file content

  File: a8b34c59c2239dc8.txt
Sample file content

  File: fec89f27179fa21f.txt
Sample file content

Folder: Processing
  File: $filename


File: index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script
      src="https://cdn.socket.io/4.7.5/socket.io.min.js"
      integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
      crossorigin="anonymous"
    ></script>
    <title>Document</title>
  </head>
  <body>
    <div id="chartContainer" style="height: 300px; width: 80%"></div>
    <script>
      const socket = io("http://localhost:3000", { transports: [webSocket] });
      //   socket.emit("send", msg);
      //       socket.on("message",(msg) =>{
      //           console.log(msg);
      //       })

      // const socket = io();

      const chart = new CanvasJS.chart("chartContainer", {
        theme: "light2",
        title: {
          text: "Real time data visualise",
        },
        data: [
          {
            type: "spline",
            dataPoints: [],
          },
        ],
      });
      socket.on("data", (data) => {
        data = JSON.parse(data);
        chart.options.data[0].dataPoints.push({ y: data.value });
        chart.render();
      });
    </script>
  </body>
</html>


File: index.js
const fs = require("fs");
const crypto = require("crypto");
const { Server } = require("socket.io");
const express = require("express");

const app = express();
const server = require("http").createServer(app);
const io = new Server(server);

const FOLDER_STRUCTURE = ["Processing", "In-progress", "Completed", "Crashed"];
const FILE_INTERVAL = 3000; // 3 seconds
const PROCESSING_DELAY_THRESHOLD = 3000; // 3 seconds
const PROCESSING_FAILURE_THRESHOLD = 5000; // 5 seconds

// Create folders if not exist
FOLDER_STRUCTURE.forEach((folder) => {
  if (!fs.existsSync(folder)) {
    fs.mkdirSync(folder);
  }
});

function moveFile(file, from, to, message) {
  fs.rename(`./${from}/${file}`, `./${to}/${file}`, (err) => {
    if (err) throw err;
    console.log(`${file} moved from ${from} to ${to}: ${message}`);
  });
}

function processFile(file) {
  const processingTime = Math.floor(Math.random() * (6000 - 1000 + 1)) + 1000; // Random time between 1 to 6 seconds
  setTimeout(() => {
    if (Math.random() < 0.8) {
      // 80% success rate
      moveFile(file, "In-progress", "Completed", "Processing completed");
    } else {
      moveFile(file, "In-progress", "Crashed", "Processing failed");
      fs.writeFile(
        `./Crashed/${file}.log`,
        Error`processing ${file}`,
        (err) => {
          if (err) throw err;
          console.log(Error`log created for ${file}`);
        }
      );
    }
    io.emit("fileProcessed", { fileName: file, processingTime });
  }, processingTime);
}

setInterval(() => {
  const filename = `${crypto.randomBytes(8).toString("hex")}.txt`;
  fs.writeFile("./processing/$filename", "Sample file content", (err) => {
    if (err) throw err;
    console.log(`${filename} generated in folder`);
    moveFile(filename, "Processing", "in-progress", "moved to inprogress");
  });
}, FILE_INTERVAL);

// Logging warnings for processing delays
setInterval(() => {
  fs.readdir("./In-progress", (err, files) => {
    if (err) throw err;
    files.forEach((file) => {
      fs.stat(`./In-progress/${file}`, (err, stats) => {
        if (err) throw err;
        const currentTime = new Date().getTime();
        const fileModifiedTime = new Date(stats.mtime).getTime();
        const processingTime = currentTime - fileModifiedTime;
        if (processingTime > PROCESSING_DELAY_THRESHOLD) {
          console.log(
            `Warning: ${file} is taking longer than expected (${processingTime}ms)`
          );
        }
      });
    });
  });
}, PROCESSING_DELAY_THRESHOLD);


io.on("connection", (socket) => {
  console.log("A user connected");
});

server.listen(3000, () => {
  console.log("Server running on port 3000");
});

// setInterval(() => {
//     const fileName = `${crypto.randomBytes(8).toString('hex')}.txt`; // Generate random file name
//     fs.writeFile(`./Processing/${fileName}`, 'Sample file content', (err) => {
//         if (err) throw err;
//         console.log(`${fileName} generated in Processing folder`);
//         moveFile(fileName, 'Processing', 'In-progress', 'Moved to In-progress');
//     });
// }, FILE_INTERVAL);

// // Monitoring and processing files
// fs.watch('./In-progress', (eventType, filename) => {
//     if (eventType === 'rename' && filename) {
//         console.log(`${filename} detected in In-progress folder`);
//         setTimeout(() => {
//             if (fs.existsSync(`./In-progress/${filename}`)) {
//                 moveFile(filename, 'In-progress', 'Crashed', 'Processing timed out');
//                 fs.writeFile(`./Crashed/${filename}.log, Processing timed out for ${filename}`, (err) => {
//                     if (err) throw err;
//                     console.log(`Timeout log created for ${filename}`);
//                 });
//             }
//         }, PROCESSING_FAILURE_THRESHOLD);
//     }
// });


File: package.json
{
  "name": "evaluation",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "server": "nodemon index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.19.2",
    "nodemon": "^3.1.0",
  
    "socket.io": "^4.7.5",
    "winston": "^3.13.0",
    "ws": "^8.17.0"
  }
}


